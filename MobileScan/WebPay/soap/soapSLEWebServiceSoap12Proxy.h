/* soapSLEWebServiceSoap12Proxy.h
   Generated by gSOAP 2.8.4 from webpaysoap.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapSLEWebServiceSoap12Proxy_H
#define soapSLEWebServiceSoap12Proxy_H
#include "soapH.h"

class SOAP_CMAC SLEWebServiceSoap12Proxy : public soap
{ public:
	/// Endpoint URL of service 'SLEWebServiceSoap12Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	SLEWebServiceSoap12Proxy();
	/// Constructor with copy of another engine state
	SLEWebServiceSoap12Proxy(const struct soap&);
	/// Constructor with endpoint URL
	SLEWebServiceSoap12Proxy(const char *url);
	/// Constructor with engine input+output mode control
	SLEWebServiceSoap12Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	SLEWebServiceSoap12Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	SLEWebServiceSoap12Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~SLEWebServiceSoap12Proxy();
	/// Initializer used by constructors
	virtual	void SLEWebServiceSoap12Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'S1_001' (returns error code or SOAP_OK)
	virtual	int S1_USCORE001(_ns1__S1_USCORE001 *ns1__S1_USCORE001, _ns1__S1_USCORE001Response *ns1__S1_USCORE001Response) { return S1_USCORE001(NULL, NULL, ns1__S1_USCORE001, ns1__S1_USCORE001Response); }
	virtual	int S1_USCORE001(const char *endpoint, const char *soap_action, _ns1__S1_USCORE001 *ns1__S1_USCORE001, _ns1__S1_USCORE001Response *ns1__S1_USCORE001Response);

	/// Web service operation 'S1_004' (returns error code or SOAP_OK)
	virtual	int S1_USCORE004(_ns1__S1_USCORE004 *ns1__S1_USCORE004, _ns1__S1_USCORE004Response *ns1__S1_USCORE004Response) { return S1_USCORE004(NULL, NULL, ns1__S1_USCORE004, ns1__S1_USCORE004Response); }
	virtual	int S1_USCORE004(const char *endpoint, const char *soap_action, _ns1__S1_USCORE004 *ns1__S1_USCORE004, _ns1__S1_USCORE004Response *ns1__S1_USCORE004Response);

	/// Web service operation 'S1_005' (returns error code or SOAP_OK)
	virtual	int S1_USCORE005(_ns1__S1_USCORE005 *ns1__S1_USCORE005, _ns1__S1_USCORE005Response *ns1__S1_USCORE005Response) { return S1_USCORE005(NULL, NULL, ns1__S1_USCORE005, ns1__S1_USCORE005Response); }
	virtual	int S1_USCORE005(const char *endpoint, const char *soap_action, _ns1__S1_USCORE005 *ns1__S1_USCORE005, _ns1__S1_USCORE005Response *ns1__S1_USCORE005Response);

	/// Web service operation 'S1_009' (returns error code or SOAP_OK)
	virtual	int S1_USCORE009(_ns1__S1_USCORE009 *ns1__S1_USCORE009, _ns1__S1_USCORE009Response *ns1__S1_USCORE009Response) { return S1_USCORE009(NULL, NULL, ns1__S1_USCORE009, ns1__S1_USCORE009Response); }
	virtual	int S1_USCORE009(const char *endpoint, const char *soap_action, _ns1__S1_USCORE009 *ns1__S1_USCORE009, _ns1__S1_USCORE009Response *ns1__S1_USCORE009Response);

	/// Web service operation 'S1_018' (returns error code or SOAP_OK)
	virtual	int S1_USCORE018(_ns1__S1_USCORE018 *ns1__S1_USCORE018, _ns1__S1_USCORE018Response *ns1__S1_USCORE018Response) { return S1_USCORE018(NULL, NULL, ns1__S1_USCORE018, ns1__S1_USCORE018Response); }
	virtual	int S1_USCORE018(const char *endpoint, const char *soap_action, _ns1__S1_USCORE018 *ns1__S1_USCORE018, _ns1__S1_USCORE018Response *ns1__S1_USCORE018Response);

	/// Web service operation 'S1_019' (returns error code or SOAP_OK)
	virtual	int S1_USCORE019(_ns1__S1_USCORE019 *ns1__S1_USCORE019, _ns1__S1_USCORE019Response *ns1__S1_USCORE019Response) { return S1_USCORE019(NULL, NULL, ns1__S1_USCORE019, ns1__S1_USCORE019Response); }
	virtual	int S1_USCORE019(const char *endpoint, const char *soap_action, _ns1__S1_USCORE019 *ns1__S1_USCORE019, _ns1__S1_USCORE019Response *ns1__S1_USCORE019Response);

	/// Web service operation 'S1_020' (returns error code or SOAP_OK)
	virtual	int S1_USCORE020(_ns1__S1_USCORE020 *ns1__S1_USCORE020, _ns1__S1_USCORE020Response *ns1__S1_USCORE020Response) { return S1_USCORE020(NULL, NULL, ns1__S1_USCORE020, ns1__S1_USCORE020Response); }
	virtual	int S1_USCORE020(const char *endpoint, const char *soap_action, _ns1__S1_USCORE020 *ns1__S1_USCORE020, _ns1__S1_USCORE020Response *ns1__S1_USCORE020Response);
};
#endif
